name: Generate Thumbnails and Deploy

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  # Manual trigger
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        with:
          # Değişiklikleri commit edebilmek için token gerekli
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🛠️ Install ImageMagick
        run: |
          sudo apt-get update
          sudo apt-get install -y imagemagick ghostscript
          
          # ImageMagick PDF policy düzenlemesi (güvenlik kısıtlamasını kaldır)
          sudo sed -i 's/<policy domain="coder" rights="none" pattern="PDF" \/>/<policy domain="coder" rights="read|write" pattern="PDF" \/>/g' /etc/ImageMagick-6/policy.xml

      - name: 📸 Generate PDF Thumbnails
        run: |
          chmod +x scripts/generate-cover.sh
          chmod +x scripts/generate-all-covers.sh
          
          # Tüm sayılar için thumbnail oluştur
          ./scripts/generate-all-covers.sh || true
          
          # Eğer yeni cover'lar oluşturulduysa commit et
          if [[ -n $(git status -s | grep 'cover.webp') ]]; then
            git config user.name "GitHub Actions Bot"
            git config user.email "actions@github.com"
            git add public/issues/*/cover.webp
            git commit -m "🖼️ Auto-generate PDF cover thumbnails"
            git push
          else
            echo "✅ No new thumbnails to commit"
          fi

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📥 Install Dependencies
        run: npm ci

      - name: 🔍 Type Check
        run: npm run type-check

      - name: 🧹 Lint
        run: npm run lint || true

      - name: 🏗️ Build
        run: npm run build
        env:
          # Environment variables (GitHub Secrets'tan ekleyin)
          VITE_SITE_URL: ${{ secrets.VITE_SITE_URL || 'https://astronomi-dergisi.com' }}
          VITE_CONTACT_FORM_ENDPOINT: ${{ secrets.VITE_CONTACT_FORM_ENDPOINT }}

      - name: 🚀 Deploy to Vercel
        if: github.ref == 'refs/heads/main'
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'
          working-directory: ./

      # Alternatif: Netlify'a deploy
      # - name: 🚀 Deploy to Netlify
      #   if: github.ref == 'refs/heads/main'
      #   uses: nwtgck/actions-netlify@v2.1
      #   with:
      #     publish-dir: './dist'
      #     production-branch: main
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     deploy-message: "Deploy from GitHub Actions"
      #   env:
      #     NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
      #     NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

      # Alternatif: AWS S3 + CloudFront
      # - name: 🚀 Deploy to S3
      #   if: github.ref == 'refs/heads/main'
      #   run: |
      #     aws s3 sync dist/ s3://${{ secrets.S3_BUCKET }}/ --delete
      #     aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_ID }} --paths "/*"
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     AWS_REGION: ${{ secrets.AWS_REGION }}

      - name: ✅ Deployment Complete
        run: echo "🎉 Deployment successful!"

